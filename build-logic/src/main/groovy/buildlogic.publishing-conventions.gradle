plugins {
    id 'maven-publish'
    id 'signing'
}

publishing {
    publications {
        maven(MavenPublication) {
            plugins.withId('java-library') {
                from components.java
            }
            plugins.withId('java-platform') {
                from components.javaPlatform
            }
            pom {
                name = artifactId
                description = providers.provider { project.description }
                url = 'https://github.com/markitect-dev/markitect-liquibase'
                inceptionYear = '2023'
                organization {
                    name = 'Markitect'
                    url = 'https://github.com/markitect-dev'
                }
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Mark Chesney'
                        url = 'https://github.com/mches'
                        organization = 'Markitect'
                        organizationUrl = 'https://github.com/markitect-dev'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/markitect-dev/markitect-liquibase.git'
                    developerConnection = 'scm:git:ssh://git@github.com/markitect-dev/markitect-liquibase.git'
                    url = 'https://github.com/markitect-dev/markitect-liquibase/tree/main'
                }
            }
        }
    }
    repositories {
        def isSnapshot = providers.provider { project.version.toString().endsWith('-SNAPSHOT') }
        def mavenAllowInsecureProtocol = providers.gradleProperty('mavenAllowInsecureProtocol').map { it.toBoolean() }
        def mavenReleaseRepositoryUrl = providers.gradleProperty('mavenReleaseRepositoryUrl')
        def mavenSnapshotRepositoryUrl = providers.gradleProperty('mavenSnapshotRepositoryUrl')
        def mavenRepositoryUrl = isSnapshot.get() ? mavenSnapshotRepositoryUrl : mavenReleaseRepositoryUrl
        if (mavenRepositoryUrl.present) {
            maven {
                name = 'maven'
                url = mavenRepositoryUrl.get()
                isAllowInsecureProtocol = mavenAllowInsecureProtocol.getOrElse(isAllowInsecureProtocol)
                credentials PasswordCredentials
            }
        }
    }
}

signing {
    def signingKeyId = providers.gradleProperty('signingKeyId')
    def signingKey = providers.gradleProperty('signingKey')
    def signingPassword = providers.gradleProperty('signingPassword')
    if (signingKey.present && signingPassword.present) {
        useInMemoryPgpKeys signingKeyId.orNull, signingKey.get(), signingPassword.get()
    } else {
        useGpgCmd()
    }
    sign publishing.publications.maven
}
