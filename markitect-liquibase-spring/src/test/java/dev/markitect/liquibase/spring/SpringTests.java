/*
 * Copyright 2023 Markitect
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.markitect.liquibase.spring;

import static org.assertj.core.api.Assertions.assertThat;

import javax.sql.DataSource;
import liquibase.Scope;
import liquibase.ThreadLocalScopeManager;
import liquibase.integration.spring.SpringLiquibase;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.boot.test.system.CapturedOutput;
import org.springframework.boot.test.system.OutputCaptureExtension;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(OutputCaptureExtension.class)
class SpringTests {
  private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();

  @Test
  void runsLiquibaseUpdate(CapturedOutput output) {
    contextRunner
        .withUserConfiguration(TestConfiguration.class)
        .withPropertyValues("markitect.liquibase.use-thread-local-scope-manager=true")
        .run(
            context ->
                assertThat(context)
                    .hasSingleBean(SpringLiquibaseBeanPostProcessor.class)
                    .hasSingleBean(SpringLiquibase.class)
                    .hasSingleBean(MarkitectSpringLiquibase.class));
    assertThat(ReflectionTestUtils.getField(Scope.class, "scopeManager"))
        .isInstanceOf(ThreadLocalScopeManager.class);
    assertThat(output)
        .contains(
            "Initializing Liquibase scope manager",
            "Providing Spring environment to Liquibase",
            "CREATE TABLE \"USER\" ("
                + "id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, "
                + "username NVARCHAR(32) NOT NULL, "
                + "displayName NVARCHAR(255), "
                + "CONSTRAINT pk_user PRIMARY KEY (id), "
                + "CONSTRAINT uq_user__username UNIQUE (username))",
            "Update command completed successfully.");
  }

  @Configuration(proxyBeanMethods = false)
  static class TestConfiguration {
    @Bean
    DataSource dataSource() {
      return new EmbeddedDatabaseBuilder()
          .generateUniqueName(true)
          .setType(EmbeddedDatabaseType.H2)
          .build();
    }

    @Bean
    SpringLiquibase liquibase(DataSource dataSource) {
      MarkitectSpringLiquibase liquibase = new MarkitectSpringLiquibase();
      liquibase.setDataSource(dataSource);
      liquibase.setChangeLog("db/changelog/db.changelog-master.xml");
      return liquibase;
    }

    @Bean
    SpringLiquibaseBeanPostProcessor springLiquibaseBeanPostProcessor(Environment environment) {
      return new SpringLiquibaseBeanPostProcessor(environment);
    }
  }
}
