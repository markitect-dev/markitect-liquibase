plugins {
    id 'groovy-gradle-plugin'
    alias libs.plugins.com.diffplug.spotless
    alias libs.plugins.com.github.node.gradle.node
    id 'idea'
}

def ci = providers.environmentVariable('CI').present
def windows = providers.systemProperty('os.name').get().startsWithIgnoreCase('Windows')
def nodeExecutable = nodeSetup.nodeDir.file(windows ? 'node.exe' : 'bin/node')
def npmExecutable = nodeSetup.nodeDir.file(windows ? 'npm.cmd' : 'bin/npm')
def npmInstallCache = rootProject.layout.projectDirectory.dir('.gradle/spotless-npm-install-cache')
def npmrc = rootProject.file('../config/spotless/.npmrc')

dependencies {
    implementation files(libs.class.superclass.protectionDomain.codeSource.location)
    implementation plugin(libs.plugins.com.diffplug.spotless)
    implementation plugin(libs.plugins.com.github.node.gradle.node)
    implementation plugin(libs.plugins.com.github.spotbugs)
    implementation plugin(libs.plugins.de.thetaphi.forbiddenapis)
    implementation plugin(libs.plugins.net.ltgt.errorprone)
    implementation plugin(libs.plugins.net.ltgt.nullaway)
    implementation plugin(libs.plugins.org.openrewrite.rewrite)
    implementation plugin(libs.plugins.org.sonarqube)
}

node {
    workDir = rootProject.layout.projectDirectory.dir('.gradle/nodejs')
    version = libs.versions.node.get()
    distBaseUrl = null
    download = true
    enableTaskRules = false
}

nodeSetup.configure {
    enabled = project == rootProject
}

['npmInstall', 'npmSetup', 'pnpmInstall', 'pnpmSetup', 'yarn', 'yarnSetup'].each { name ->
    tasks.named(name) {
        enabled = false
    }
}

spotless {
    ratchetFrom 'origin/main'
    groovyGradle {
        target (
            'src/**/*.gradle',
            '*.gradle',
        )
        leadingTabsToSpaces 4
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'properties', {
        target 'gradle.properties'
        replaceRegex 'prePrettier', '(?m)^([ \\t]*[#!])', '# $1'
        prettier(
            [
                'prettier': libs.versions.prettier.asProvider().get(),
                'prettier-plugin-properties': libs.versions.prettier.plugin.properties.get(),
            ],
        )
            .nodeExecutable(nodeExecutable)
            .npmExecutable(npmExecutable)
            .npmInstallCache(npmInstallCache)
            .npmrc(npmrc)
            .config(
                [
                    'parser': 'dot-properties',
                    'plugins': ['prettier-plugin-properties'],
                    'keySeparator': '=',
                    'printWidth': 0,
                ],
            )
        replaceRegex 'postPrettier', '(?m)^# ', ''
    }
}

tasks.named('spotlessProperties') {
    dependsOn rootProject.tasks.nodeSetup
}

spotlessCheck.configure {
    if (!ci) {
        dependsOn spotlessApply
    }
}

static def plugin(Provider<PluginDependency> plugin) {
    return plugin.map { it.with { "${pluginId}:${pluginId}.gradle.plugin:${version}" } }
}
