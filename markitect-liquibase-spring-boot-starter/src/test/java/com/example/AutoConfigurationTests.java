/*
 * Copyright 2023 Markitect
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example;

import static org.assertj.core.api.Assertions.assertThat;

import dev.markitect.liquibase.spring.SpringLiquibaseBeanPostProcessor;
import dev.markitect.liquibase.spring.boot.autoconfigure.MarkitectLiquibaseAutoConfiguration;
import liquibase.Scope;
import liquibase.ThreadLocalScopeManager;
import liquibase.integration.spring.SpringLiquibase;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.autoconfigure.AutoConfigurations;
import org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration;
import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.boot.test.system.CapturedOutput;
import org.springframework.boot.test.system.OutputCaptureExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(OutputCaptureExtension.class)
class AutoConfigurationTests {
  private final ApplicationContextRunner contextRunner =
      new ApplicationContextRunner()
          .withConfiguration(
              AutoConfigurations.of(
                  LiquibaseAutoConfiguration.class, MarkitectLiquibaseAutoConfiguration.class))
          .withPropertyValues(
              "spring.datasource.generate-unique-name=true",
              "markitect.liquibase.use-thread-local-scope-manager=true",
              "markitect.liquibase.output-default-schema=false");

  @Test
  void backsOffWithNoDataSourceBean() {
    contextRunner.run(
        context -> {
          assertThat(context).doesNotHaveBean(SpringLiquibaseBeanPostProcessor.class);
          assertThat(context).doesNotHaveBean(SpringLiquibase.class);
        });
  }

  @Test
  void runsLiquibaseUpdate(CapturedOutput output) {
    contextRunner
        .withUserConfiguration(EmbeddedDataSourceConfiguration.class)
        .run(
            context -> {
              assertThat(context).hasSingleBean(SpringLiquibaseBeanPostProcessor.class);
              assertThat(context).hasSingleBean(SpringLiquibase.class);
            });
    assertThat(ReflectionTestUtils.getField(Scope.class, "scopeManager"))
        .isInstanceOf(ThreadLocalScopeManager.class);
    assertThat(output)
        .contains(
            "Initializing Liquibase scope manager",
            "Providing Spring environment to Liquibase",
            "CREATE TABLE \"USER\" ("
                + "id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, "
                + "username NVARCHAR(32) NOT NULL, "
                + "displayName NVARCHAR(255), "
                + "CONSTRAINT PK_USER PRIMARY KEY (id))",
            "Update command completed successfully.");
  }
}
